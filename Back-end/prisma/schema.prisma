// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
enum PaymentMethod {
  PREPAID
  COD
}

enum Role {
  USER     
  ADMIN    
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  firstName   String?
  lastName    String?
  password    String
  role        Role      @default(USER)
  cart        Cart?
  orders      Order[]
  addresses   Address[] // ความสัมพันธ์ไปยังตาราง Address
  reviews   Review[]
  favorites Favorite[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  recipientName String?
  phone     String
  street    String
  city      String
  province  String?
  postalCode String
  country   String    @default("Thailand")
  isDefault Boolean   @default(false)
  label     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  imageUrl String?
  imagePublicId String?
  products  Product[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int         @default(0)
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  imageUrl      String?
  imagePublicId String?
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews         Review[]
  favorites Favorite[]
  averageRating   Float @default(0)
  reviewCount     Int @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Cart {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int        @unique
  items      CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id           Int          @id @default(autoincrement())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  items        OrderItem[]
  totalAmount  Float
  status       OrderStatus  @default(PENDING)
  paymentMethod PaymentMethod @default(COD)
  shippingAddress String?
  phone           String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  unitPrice  Float
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}
